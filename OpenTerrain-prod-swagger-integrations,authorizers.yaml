---
swagger: "2.0"
info:
  version: "2016-06-26T22:17:36Z"
  title: "OpenTerrain"
host: "qcgu4w9e82.execute-api.us-east-1.amazonaws.com"
basePath: "/prod"
schemes:
- "https"
paths:
  /3857/{z}/{x}/{y}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "y"
        in: "path"
        required: true
        type: "string"
      - name: "z"
        in: "path"
        required: true
        type: "string"
      - name: "x"
        in: "path"
        required: true
        type: "string"
      responses:
        400:
          description: "400 response"
        302:
          description: "302 response"
          headers:
            Location:
              type: "string"
            Content-Type:
              type: "string"
        502:
          description: "502 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "302"
            responseParameters:
              method.response.header.Content-Type: "'text/plain'"
              method.response.header.Location: "integration.response.body.location"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n"
          Invalid.+:
            statusCode: "404"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))"
          .+:
            statusCode: "502"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))"
        requestTemplates:
          application/json: "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\
            ##  This template will pass through all parameters including path, querystring,\
            \ header, stage variables, and context through to the integration endpoint\
            \ via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\"\
            \ : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n\
            \    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName\
            \ in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\
            \n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n\
            #end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\
            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n   \
            \ #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\"\
            \ : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\"\
            ,\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\"\
            \ : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\"\
            ,\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\"\
            ,\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\"\
            ,\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\"\
            ,\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\"\
            ,\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"\
            $context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\"\
            ,\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"\
            $context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\"\
            ,\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" :\
            \ \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\
            \n    }\n}\n"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:247182545390:function:openterrain_hillshade/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        cacheNamespace: "2wp49x"
        cacheKeyParameters:
        - "method.request.path.x"
        - "method.request.path.y"
        - "method.request.path.z"
        type: "aws"
  /darkmatter/{z}/{x}/{y}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "y"
        in: "path"
        required: true
        type: "string"
      - name: "z"
        in: "path"
        required: true
        type: "string"
      - name: "x"
        in: "path"
        required: true
        type: "string"
      responses:
        400:
          description: "400 response"
        302:
          description: "302 response"
          headers:
            Location:
              type: "string"
            Content-Type:
              type: "string"
        502:
          description: "502 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "302"
            responseParameters:
              method.response.header.Content-Type: "'text/plain'"
              method.response.header.Location: "integration.response.body.location"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))"
          Invalid.+:
            statusCode: "404"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))"
          .+:
            statusCode: "502"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))"
        requestTemplates:
          application/json: "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\
            ##  This template will pass through all parameters including path, querystring,\
            \ header, stage variables, and context through to the integration endpoint\
            \ via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\"\
            \ : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n\
            \    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName\
            \ in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\
            \n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n\
            #end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\
            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n   \
            \ #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\"\
            \ : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\"\
            ,\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\"\
            \ : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\"\
            ,\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\"\
            ,\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\"\
            ,\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\"\
            ,\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\"\
            ,\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"\
            $context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\"\
            ,\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"\
            $context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\"\
            ,\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" :\
            \ \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\
            \n    }\n}\n"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:247182545390:function:openterrain_darkmatter/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        cacheNamespace: "e83vcx"
        cacheKeyParameters:
        - "method.request.path.y"
        - "method.request.path.x"
        - "method.request.path.z"
        type: "aws"
  /positron/{z}/{x}/{y}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "y"
        in: "path"
        required: true
        type: "string"
      - name: "z"
        in: "path"
        required: true
        type: "string"
      - name: "x"
        in: "path"
        required: true
        type: "string"
      responses:
        400:
          description: "400 response"
        302:
          description: "302 response"
          headers:
            Location:
              type: "string"
            Content-Type:
              type: "string"
        502:
          description: "502 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "302"
            responseParameters:
              method.response.header.Content-Type: "'text/plain'"
              method.response.header.Location: "integration.response.body.location"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))"
          Invalid.+:
            statusCode: "404"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))"
          .+:
            statusCode: "502"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))"
        requestTemplates:
          application/json: "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\
            ##  This template will pass through all parameters including path, querystring,\
            \ header, stage variables, and context through to the integration endpoint\
            \ via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\"\
            \ : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n\
            \    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName\
            \ in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\
            \n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n\
            #end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\
            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n   \
            \ #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\"\
            \ : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\"\
            ,\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\"\
            \ : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\"\
            ,\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\"\
            ,\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\"\
            ,\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\"\
            ,\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\"\
            ,\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"\
            $context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\"\
            ,\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"\
            $context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\"\
            ,\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" :\
            \ \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\
            \n    }\n}\n"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:247182545390:function:openterrain_positron/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        cacheNamespace: "n73fwr"
        cacheKeyParameters:
        - "method.request.path.x"
        - "method.request.path.y"
        - "method.request.path.z"
        type: "aws"
  /terrain-classic/{z}/{x}/{y}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "y"
        in: "path"
        required: true
        type: "string"
      - name: "z"
        in: "path"
        required: true
        type: "string"
      - name: "x"
        in: "path"
        required: true
        type: "string"
      responses:
        400:
          description: "400 response"
        302:
          description: "302 response"
          headers:
            Location:
              type: "string"
            Content-Type:
              type: "string"
        502:
          description: "502 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "302"
            responseParameters:
              method.response.header.Content-Type: "'text/plain'"
              method.response.header.Location: "integration.response.body.location"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))"
          .+:
            statusCode: "502"
        requestTemplates:
          application/json: "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\
            ##  This template will pass through all parameters including path, querystring,\
            \ header, stage variables, and context through to the integration endpoint\
            \ via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\"\
            \ : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n\
            \    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName\
            \ in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\
            \n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n\
            #end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\
            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n   \
            \ #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\"\
            \ : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\"\
            ,\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\"\
            \ : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\"\
            ,\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\"\
            ,\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\"\
            ,\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\"\
            ,\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\"\
            ,\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"\
            $context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\"\
            ,\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"\
            $context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\"\
            ,\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" :\
            \ \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\
            \n    }\n}\n"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:247182545390:function:openterrain_terrain/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        cacheNamespace: "g6ppqf"
        cacheKeyParameters:
        - "method.request.path.x"
        - "method.request.path.y"
        - "method.request.path.z"
        type: "aws"
  /terrain-background/{z}/{x}/{y}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "y"
        in: "path"
        required: true
        type: "string"
      - name: "z"
        in: "path"
        required: true
        type: "string"
      - name: "x"
        in: "path"
        required: true
        type: "string"
      responses:
        400:
          description: "400 response"
        302:
          description: "302 response"
          headers:
            Location:
              type: "string"
            Content-Type:
              type: "string"
        502:
          description: "502 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "302"
            responseParameters:
              method.response.header.Content-Type: "'text/plain'"
              method.response.header.Location: "integration.response.body.location"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))"
          .+:
            statusCode: "502"
        requestTemplates:
          application/json: "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\
            ##  This template will pass through all parameters including path, querystring,\
            \ header, stage variables, and context through to the integration endpoint\
            \ via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\"\
            \ : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n\
            \    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName\
            \ in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\
            \n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n\
            #end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\
            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n   \
            \ #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\"\
            \ : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\"\
            ,\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\"\
            \ : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\"\
            ,\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\"\
            ,\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\"\
            ,\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\"\
            ,\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\"\
            ,\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"\
            $context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\"\
            ,\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"\
            $context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\"\
            ,\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" :\
            \ \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\
            \n    }\n}\n"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:247182545390:function:openterrain_terrain-background/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        cacheNamespace: "g6ppqf"
        cacheKeyParameters:
        - "method.request.path.x"
        - "method.request.path.y"
        - "method.request.path.z"
        type: "aws"
  /terrain-bg/{z}/{x}/{y}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "y"
        in: "path"
        required: true
        type: "string"
      - name: "z"
        in: "path"
        required: true
        type: "string"
      - name: "x"
        in: "path"
        required: true
        type: "string"
      responses:
        400:
          description: "400 response"
        302:
          description: "302 response"
          headers:
            Location:
              type: "string"
            Content-Type:
              type: "string"
        502:
          description: "502 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "302"
            responseParameters:
              method.response.header.Content-Type: "'text/plain'"
              method.response.header.Location: "integration.response.body.location"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))"
          .+:
            statusCode: "502"
        requestTemplates:
          application/json: "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\
            ##  This template will pass through all parameters including path, querystring,\
            \ header, stage variables, and context through to the integration endpoint\
            \ via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\"\
            \ : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n\
            \    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName\
            \ in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\
            \n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n\
            #end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\
            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n   \
            \ #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\"\
            \ : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\"\
            ,\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\"\
            \ : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\"\
            ,\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\"\
            ,\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\"\
            ,\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\"\
            ,\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\"\
            ,\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"\
            $context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\"\
            ,\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"\
            $context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\"\
            ,\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" :\
            \ \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\
            \n    }\n}\n"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:247182545390:function:openterrain_terrain-classic-bg/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        cacheNamespace: "g6ppqf"
        cacheKeyParameters:
        - "method.request.path.x"
        - "method.request.path.y"
        - "method.request.path.z"
        type: "aws"
  /terrain-lines/{z}/{x}/{y}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "y"
        in: "path"
        required: true
        type: "string"
      - name: "z"
        in: "path"
        required: true
        type: "string"
      - name: "x"
        in: "path"
        required: true
        type: "string"
      responses:
        400:
          description: "400 response"
        302:
          description: "302 response"
          headers:
            Location:
              type: "string"
            Content-Type:
              type: "string"
        502:
          description: "502 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "302"
            responseParameters:
              method.response.header.Content-Type: "'text/plain'"
              method.response.header.Location: "integration.response.body.location"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))"
          .+:
            statusCode: "502"
        requestTemplates:
          application/json: "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\
            ##  This template will pass through all parameters including path, querystring,\
            \ header, stage variables, and context through to the integration endpoint\
            \ via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\"\
            \ : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n\
            \    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName\
            \ in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\
            \n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n\
            #end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\
            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n   \
            \ #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\"\
            \ : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\"\
            ,\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\"\
            \ : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\"\
            ,\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\"\
            ,\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\"\
            ,\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\"\
            ,\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\"\
            ,\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"\
            $context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\"\
            ,\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"\
            $context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\"\
            ,\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" :\
            \ \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\
            \n    }\n}\n"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:247182545390:function:openterrain_terrain-classic-lines/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        cacheNamespace: "g6ppqf"
        cacheKeyParameters:
        - "method.request.path.x"
        - "method.request.path.y"
        - "method.request.path.z"
        type: "aws"
  /terrain-labels/{z}/{x}/{y}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "y"
        in: "path"
        required: true
        type: "string"
      - name: "z"
        in: "path"
        required: true
        type: "string"
      - name: "x"
        in: "path"
        required: true
        type: "string"
      responses:
        400:
          description: "400 response"
        302:
          description: "302 response"
          headers:
            Location:
              type: "string"
            Content-Type:
              type: "string"
        502:
          description: "502 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "302"
            responseParameters:
              method.response.header.Content-Type: "'text/plain'"
              method.response.header.Location: "integration.response.body.location"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))"
          .+:
            statusCode: "502"
        requestTemplates:
          application/json: "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\
            ##  This template will pass through all parameters including path, querystring,\
            \ header, stage variables, and context through to the integration endpoint\
            \ via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\"\
            \ : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n\
            \    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName\
            \ in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\
            \n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n\
            #end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\
            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n   \
            \ #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\"\
            \ : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\"\
            ,\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\"\
            \ : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\"\
            ,\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\"\
            ,\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\"\
            ,\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\"\
            ,\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\"\
            ,\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"\
            $context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\"\
            ,\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"\
            $context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\"\
            ,\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" :\
            \ \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\
            \n    }\n}\n"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:247182545390:function:openterrain_terrain-classic-labels/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        cacheNamespace: "g6ppqf"
        cacheKeyParameters:
        - "method.request.path.x"
        - "method.request.path.y"
        - "method.request.path.z"
        type: "aws"
  /terrain-features/{z}/{x}/{y}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "y"
        in: "path"
        required: true
        type: "string"
      - name: "z"
        in: "path"
        required: true
        type: "string"
      - name: "x"
        in: "path"
        required: true
        type: "string"
      responses:
        400:
          description: "400 response"
        302:
          description: "302 response"
          headers:
            Location:
              type: "string"
            Content-Type:
              type: "string"
        502:
          description: "502 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "302"
            responseParameters:
              method.response.header.Content-Type: "'text/plain'"
              method.response.header.Location: "integration.response.body.location"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))"
          .+:
            statusCode: "502"
        requestTemplates:
          application/json: "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\
            ##  This template will pass through all parameters including path, querystring,\
            \ header, stage variables, and context through to the integration endpoint\
            \ via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\"\
            \ : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n\
            \    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName\
            \ in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\
            \n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n\
            #end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\
            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n   \
            \ #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\"\
            \ : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\"\
            ,\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\"\
            \ : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\"\
            ,\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\"\
            ,\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\"\
            ,\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\"\
            ,\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\"\
            ,\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"\
            $context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\"\
            ,\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"\
            $context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\"\
            ,\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" :\
            \ \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\
            \n    }\n}\n"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:247182545390:function:openterrain_terrain-classic-features/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        cacheNamespace: "g6ppqf"
        cacheKeyParameters:
        - "method.request.path.x"
        - "method.request.path.y"
        - "method.request.path.z"
        type: "aws"
  /terrain/{z}/{x}/{y}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "y"
        in: "path"
        required: true
        type: "string"
      - name: "z"
        in: "path"
        required: true
        type: "string"
      - name: "x"
        in: "path"
        required: true
        type: "string"
      responses:
        400:
          description: "400 response"
        302:
          description: "302 response"
          headers:
            Location:
              type: "string"
            Content-Type:
              type: "string"
        502:
          description: "502 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "302"
            responseParameters:
              method.response.header.Content-Type: "'text/plain'"
              method.response.header.Location: "integration.response.body.location"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))"
          .+:
            statusCode: "502"
        requestTemplates:
          application/json: "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\
            ##  This template will pass through all parameters including path, querystring,\
            \ header, stage variables, and context through to the integration endpoint\
            \ via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\"\
            \ : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n\
            \    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName\
            \ in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\
            \n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n\
            #end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\
            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n   \
            \ #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\"\
            \ : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\"\
            ,\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\"\
            \ : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\"\
            ,\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\"\
            ,\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\"\
            ,\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\"\
            ,\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\"\
            ,\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"\
            $context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\"\
            ,\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"\
            $context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\"\
            ,\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" :\
            \ \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\
            \n    }\n}\n"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:247182545390:function:openterrain_terrain/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        cacheNamespace: "g6ppqf"
        cacheKeyParameters:
        - "method.request.path.x"
        - "method.request.path.y"
        - "method.request.path.z"
        type: "aws"
  /terrain-water/{z}/{x}/{y}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "y"
        in: "path"
        required: true
        type: "string"
      - name: "z"
        in: "path"
        required: true
        type: "string"
      - name: "x"
        in: "path"
        required: true
        type: "string"
      responses:
        400:
          description: "400 response"
        302:
          description: "302 response"
          headers:
            Location:
              type: "string"
            Content-Type:
              type: "string"
        502:
          description: "502 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "302"
            responseParameters:
              method.response.header.Content-Type: "'text/plain'"
              method.response.header.Location: "integration.response.body.location"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))"
          .+:
            statusCode: "502"
        requestTemplates:
          application/json: "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\
            ##  This template will pass through all parameters including path, querystring,\
            \ header, stage variables, and context through to the integration endpoint\
            \ via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\"\
            \ : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n\
            \    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName\
            \ in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\
            \n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n\
            #end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\
            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n   \
            \ #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\"\
            \ : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\"\
            ,\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\"\
            \ : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\"\
            ,\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\"\
            ,\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\"\
            ,\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\"\
            ,\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\"\
            ,\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"\
            $context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\"\
            ,\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"\
            $context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\"\
            ,\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" :\
            \ \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\
            \n    }\n}\n"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:247182545390:function:openterrain_terrain-classic-water/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        cacheNamespace: "g6ppqf"
        cacheKeyParameters:
        - "method.request.path.x"
        - "method.request.path.y"
        - "method.request.path.z"
        type: "aws"
  /terrain-grey-hills/{z}/{x}/{y}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "y"
        in: "path"
        required: true
        type: "string"
      - name: "z"
        in: "path"
        required: true
        type: "string"
      - name: "x"
        in: "path"
        required: true
        type: "string"
      responses:
        400:
          description: "400 response"
        302:
          description: "302 response"
          headers:
            Location:
              type: "string"
            Content-Type:
              type: "string"
        502:
          description: "502 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "302"
            responseParameters:
              method.response.header.Content-Type: "'text/plain'"
              method.response.header.Location: "integration.response.body.location"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))"
          .+:
            statusCode: "502"
        requestTemplates:
          application/json: "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\
            ##  This template will pass through all parameters including path, querystring,\
            \ header, stage variables, and context through to the integration endpoint\
            \ via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\"\
            \ : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n\
            \    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName\
            \ in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\
            \n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n\
            #end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\
            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n   \
            \ #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\"\
            \ : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\"\
            ,\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\"\
            \ : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\"\
            ,\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\"\
            ,\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\"\
            ,\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\"\
            ,\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\"\
            ,\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"\
            $context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\"\
            ,\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"\
            $context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\"\
            ,\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" :\
            \ \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\
            \n    }\n}\n"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:247182545390:function:openterrain_terrain-grey-hills/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        cacheNamespace: "g6ppqf"
        cacheKeyParameters:
        - "method.request.path.x"
        - "method.request.path.y"
        - "method.request.path.z"
        type: "aws"
  /r/{style}/{z}/{x}/{y}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "style"
        in: "path"
        required: true
        type: "string"
      - name: "z"
        in: "path"
        required: true
        type: "string"
      - name: "x"
        in: "path"
        required: true
        type: "string"
      - name: "y"
        in: "path"
        required: true
        type: "string"
      responses:
        400:
          description: "400 response"
        302:
          description: "302 response"
          headers:
            Location:
              type: "string"
            Content-Type:
              type: "string"
        502:
          description: "502 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "302"
            responseParameters:
              method.response.header.Content-Type: "'text/plain'"
              method.response.header.Location: "integration.response.body.location"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))"
          .+:
            statusCode: "502"
        requestTemplates:
          application/json: "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\
            ##  This template will pass through all parameters including path, querystring,\
            \ header, stage variables, and context through to the integration endpoint\
            \ via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\"\
            \ : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n\
            \    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName\
            \ in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\
            \n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n\
            #end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\
            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n   \
            \ #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\"\
            \ : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\"\
            ,\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\"\
            \ : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\"\
            ,\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\"\
            ,\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\"\
            ,\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\"\
            ,\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\"\
            ,\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"\
            $context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\"\
            ,\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"\
            $context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\"\
            ,\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" :\
            \ \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\
            \n    }\n}\n"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:247182545390:function:openterrain_randomized-redirector/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        cacheNamespace: "g6ppqf"
        cacheKeyParameters:
        - "method.request.path.style"
        - "method.request.path.z"
        - "method.request.path.x"
        - "method.request.path.y"
        type: "aws"
